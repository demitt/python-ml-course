import numpy as np
from TaskVerifier import TaskVerifier


# Функция должна вычислить производные от cost function по параметрам W1, W2, b1, b2.
# Задание: задать корректное значение переменным grads_W1, grads_W2, grads_b1, grads_b2.
# Переменная cache содержит словарь из активаций l1 и l2, полученных в результате forward propagation.

# X: (n, m)
# Y: (1, m)
# W1: (n1, n)
# W2: (1, n1)
# b1: (n1, 1)
# b2: (1, 1)
def cost_gradients(X, Y, W1, b1, W2, b2, cache):
    a1 = cache['l1']
    a2 = cache['l2']

    m = X.shape[1]

    # НАЧАЛО ЗАДАНИЯ
    # ...

    # КОНЕЦ ЗАДАНИЯ

    return dict(W1=grads_W1, b1=grads_b1, W2=grads_W2, b2=grads_b2)


if __name__ == '__main__':
    task_verifier = TaskVerifier()

    task_verifier.test(
        'task_1',
        'cost_gradients',
        [
            np.array([[1.6, 3.7], [2.3, 1.2], [-5.7, 0.6]]),
            np.array([[0, 1]]),
            np.array([[1.0, -1.5, 2.5], [2.4, -1.2, 2.2], [-2.3, 1.1, -0.1]]),  # (3, 3)
            np.array([[0.3], [1.3], [-0.2]]),  # (3, 1)
            np.array([[0.2, -3.8, 4.6]]),  # (1, 3)
            np.array([[1.5]]),  # (1, 1)
            {'l1': np.array([[1.37450754e-07, 9.75872979e-01],
                          [3.86857715e-05, 9.99957246e-01],
                          [3.14319886e-01, 5.81103734e-04]]), 'l2': np.array([[0.95006103, 0.10890357]])}
        ],
        {'W1': np.array([[-7.76286894e-03, -2.51766397e-03, -1.25892143e-03],
                      [1.56089682e-04, -7.37485024e-05, 4.41458522e-04],
                      [7.49112363e-01, 1.08175154e+00, -2.68511652e+00]]), 'b1': np.array([[-2.09806528e-03],
                                                                                        [2.55338314e-06],
                                                                                        [4.69757486e-01]]),
         'W2': np.array([[-0.4347984, -0.44551079, 0.14905263]]), 'b2': np.array([[0.0294823]])}
    )
